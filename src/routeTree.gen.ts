/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ModelsIndexRouteImport } from './routes/models/index'
import { Route as DatasetsIndexRouteImport } from './routes/datasets/index'
import { Route as SettingsGeneralRouteImport } from './routes/settings/general'
import { Route as DatasetsNewRouteImport } from './routes/datasets/new'
import { Route as ModelsIdIndexRouteImport } from './routes/models/$id/index'
import { Route as DatasetsIdIndexRouteImport } from './routes/datasets/$id/index'
import { Route as DatasetsIdSettingsRouteImport } from './routes/datasets/$id/settings'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelsIndexRoute = ModelsIndexRouteImport.update({
  id: '/models/',
  path: '/models/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsIndexRoute = DatasetsIndexRouteImport.update({
  id: '/datasets/',
  path: '/datasets/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsGeneralRoute = SettingsGeneralRouteImport.update({
  id: '/settings/general',
  path: '/settings/general',
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsNewRoute = DatasetsNewRouteImport.update({
  id: '/datasets/new',
  path: '/datasets/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ModelsIdIndexRoute = ModelsIdIndexRouteImport.update({
  id: '/models/$id/',
  path: '/models/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsIdIndexRoute = DatasetsIdIndexRouteImport.update({
  id: '/datasets/$id/',
  path: '/datasets/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsIdSettingsRoute = DatasetsIdSettingsRouteImport.update({
  id: '/datasets/$id/settings',
  path: '/datasets/$id/settings',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/datasets/new': typeof DatasetsNewRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/datasets': typeof DatasetsIndexRoute
  '/models': typeof ModelsIndexRoute
  '/datasets/$id/settings': typeof DatasetsIdSettingsRoute
  '/datasets/$id': typeof DatasetsIdIndexRoute
  '/models/$id': typeof ModelsIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/datasets/new': typeof DatasetsNewRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/datasets': typeof DatasetsIndexRoute
  '/models': typeof ModelsIndexRoute
  '/datasets/$id/settings': typeof DatasetsIdSettingsRoute
  '/datasets/$id': typeof DatasetsIdIndexRoute
  '/models/$id': typeof ModelsIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/datasets/new': typeof DatasetsNewRoute
  '/settings/general': typeof SettingsGeneralRoute
  '/datasets/': typeof DatasetsIndexRoute
  '/models/': typeof ModelsIndexRoute
  '/datasets/$id/settings': typeof DatasetsIdSettingsRoute
  '/datasets/$id/': typeof DatasetsIdIndexRoute
  '/models/$id/': typeof ModelsIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/datasets/new'
    | '/settings/general'
    | '/datasets'
    | '/models'
    | '/datasets/$id/settings'
    | '/datasets/$id'
    | '/models/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/datasets/new'
    | '/settings/general'
    | '/datasets'
    | '/models'
    | '/datasets/$id/settings'
    | '/datasets/$id'
    | '/models/$id'
  id:
    | '__root__'
    | '/'
    | '/datasets/new'
    | '/settings/general'
    | '/datasets/'
    | '/models/'
    | '/datasets/$id/settings'
    | '/datasets/$id/'
    | '/models/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DatasetsNewRoute: typeof DatasetsNewRoute
  SettingsGeneralRoute: typeof SettingsGeneralRoute
  DatasetsIndexRoute: typeof DatasetsIndexRoute
  ModelsIndexRoute: typeof ModelsIndexRoute
  DatasetsIdSettingsRoute: typeof DatasetsIdSettingsRoute
  DatasetsIdIndexRoute: typeof DatasetsIdIndexRoute
  ModelsIdIndexRoute: typeof ModelsIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/models/': {
      id: '/models/'
      path: '/models'
      fullPath: '/models'
      preLoaderRoute: typeof ModelsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datasets/': {
      id: '/datasets/'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof DatasetsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/general': {
      id: '/settings/general'
      path: '/settings/general'
      fullPath: '/settings/general'
      preLoaderRoute: typeof SettingsGeneralRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datasets/new': {
      id: '/datasets/new'
      path: '/datasets/new'
      fullPath: '/datasets/new'
      preLoaderRoute: typeof DatasetsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/models/$id/': {
      id: '/models/$id/'
      path: '/models/$id'
      fullPath: '/models/$id'
      preLoaderRoute: typeof ModelsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datasets/$id/': {
      id: '/datasets/$id/'
      path: '/datasets/$id'
      fullPath: '/datasets/$id'
      preLoaderRoute: typeof DatasetsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datasets/$id/settings': {
      id: '/datasets/$id/settings'
      path: '/datasets/$id/settings'
      fullPath: '/datasets/$id/settings'
      preLoaderRoute: typeof DatasetsIdSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DatasetsNewRoute: DatasetsNewRoute,
  SettingsGeneralRoute: SettingsGeneralRoute,
  DatasetsIndexRoute: DatasetsIndexRoute,
  ModelsIndexRoute: ModelsIndexRoute,
  DatasetsIdSettingsRoute: DatasetsIdSettingsRoute,
  DatasetsIdIndexRoute: DatasetsIdIndexRoute,
  ModelsIdIndexRoute: ModelsIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
